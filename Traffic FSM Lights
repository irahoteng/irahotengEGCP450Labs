MAIN.C file
#include <stdint.h>
#include "SysTick.h"
#include "LEDInit.h"
#include "Switches.h"
#include "msp432p401r.h"
//structure declaration
struct Traffic {
    uint32_t Out[2]; //Out is going to unsigned 32 bit integers
    uint32_t Time; //10ms unsigned 32 bit integers
    const struct Traffic *Next[8];//15 FSM

};
//typedef declared
typedef const struct Traffic Traffic_Light;
#define goN &FSM[0] //Cars headed North
#define waitN &FSM[1] //Cars wait North
#define goE &FSM[2] //Cars headed East
#define waitE &FSM[3] //Cars wait East
#define walk &FSM[4] //crosswalk button pressed
#define walkR &FSM[5] //LED is solid red, NOT SAFE TO WALK
#define walkRe &FSM[6] // LED is still red NOT SAFE TO WALK
#define walkRed &FSM[7] // LED is still red NOT SAFE TO WALK
#define walkStop0 &FSM[8] // LED is still red NOT SAFE TO WALK
#define walkWait &FSM[9] //LED is still red NOT SAFE TO WALK
#define walkGo0  &FSM[10] //Walk LED is Green
#define walkGo1 &FSM[11] // Walk LED is Green
#define walkStop1 &FSM[12] // LED is red again NOT SAFE TO WALK
//FSM declaration
Traffic_Light FSM[15] = {
                          {{0x0C, 0x01}, 100,{goN,waitN,goN, waitN, walk, walk, walk, walk}}, //go North
                          {{0x14, 0x01}, 40, {goE, goE, goE, goE,walk, walk ,walk, walk }},// wait North
                            {{0x21, 0x01}, 120,{goE, goE, waitE, waitE, walk ,  walk, walk, walk}}, //go East
                            {{0x22, 0x01},50, {goN, goN, goN,goN, walk , walk, walk, walk}}, //wait East
                            //The rest of the states are given below
                            {{0x24, 0x01},120,{walkR, walkR,walkR,walkR, walkR, walkR, walkR, walkR}},//RED LIGHT
                            {{0X24, 0X01}, 120,{walkRe, walkRe, walkRe, walkRe, walkRe, walkRe, walkRe, walkRe}},//RED LIGHT
                            {{0X24, 0X02}, 170,{walkRed, walkRed, walkRed, walkRed, walkRed, walkRed, walkRed, walkRed}},//GREEN LIGHT
                            {{0X24, 0X00}, 95,{walkStop0, walkStop0, walkStop0, walkStop0, walkStop0, walkStop0, walkStop0, walkStop0}}, // NO LIGHT

                            {{0X24, 0X01}, 95,{walkWait, walkWait, walkWait, walkWait, walkWait, walkWait, walkWait, walkWait}},//RED LIGHT
                            {{0X24, 0X01}, 95,{walkGo0, walkGo0, walkGo0, walkGo0, walkGo0, walkGo0, walkGo0, walkGo0}},//NO LIGHT
                            {{0X24, 0X01}, 95,{walkGo1, walkGo1, walkGo1, walkGo1, walkGo1, walkGo1, walkGo1, walkGo1}},//RED LIGHT

                            {{0X24, 0X01}, 95,{walkStop1, walkStop1, walkStop1, walkStop1, walkStop1, walkStop1, walkStop1, walkStop1}}, // RED LIGHT
                            {{0X24, 0X01}, 95,{goE, goE, goN, goN, goE, goE, goN, goE}}, //RED LIGHT
                            {{0X24, 0X00}, 95,{goE, goE, goN, goN, goE, goE, goN, goE}},// NO LIGHT
                            {{0X24, 0X02}, 95,{walkR, walkR, walkR, walkR, walkR, walkR, walkR, walkR}} //GREEN LIGHT
                          };
void main(void){
    Traffic_Light *Pt; //Traffic_Lights function becomes pointer
    //Switches();

    uint32_t Input; //Input is going to unsigned 32 bit integers
    GPIO_Init_p1_p2();
    SysTick_Init();
    GPIO_Init_p4();//main GPIO outputs
    GPIO_Init_p5();//main GPIO inputs
    Pt = goE;
    while(1){
        P4->OUT = (P4->OUT&~0x3F)|(Pt->Out[0]); //LEDs on breadboard will be set
        P2->OUT = (P2->OUT&~0x03)|(Pt->Out[1]); //LEDs on MSP432 will be set(our crosswalk)
        SysTick_Wait10ms(Pt->Time); //10ms SysTick
        Input = (P5->IN&0x07);
        Pt = Pt->Next[Input];//Input here
    }

}

Switches.h file
/*
 * Switches.h
 *
 *  Created on: Oct 9, 2023
 *      Author: niidr
 */

#ifndef SWITCHES_H_
#define SWITCHES_H_

void GPIO_Init_p1_p2();




#endif /* SWITCHES_H_ */
Switches.c file
/*
 * Switches.c
 *
 *  Created on: Oct 9, 2023
 *      Author: niidr
 */

#include <stdint.h>
#include "SysTick.h"
#include "msp432p401r.h"
//This switch file was created so that my code would look more clear and concise
//Switch files purpose is to serve as the crosswalk for this application

void GPIO_Init_p1_p2(){
    P2->SEL0 &= ~0x03; // configure P2.0 GPIO
     P2->SEL1 &= ~0x03;
     P2->DIR |= 0x03; // make P2.0 output
}
LEDInit.h file
/*
 * LEDInit.h
 *
 *  Created on: Oct 9, 2023
 *      Author: niidr
 */

#ifndef LEDINIT_H_
#define LEDINIT_H_


void GPIO_Init_p4();
void GPIO_Init_p5();


#endif /* LEDINIT_H_ */
LEDInit.C File

#include <stdint.h>
#include "SysTick.h"
#include "msp432p401r.h"
//.. our output LEDs using Port 4 pins 0-5
void GPIO_Init_p4(){
 P4->SEL0 &= ~0x3F; // configure P4.0 GPIO
 P4->SEL1 &= ~0x3F;
 P4->DIR |= 0x3F; // make P4.0 output

}
//GPIO declarations for our input
void GPIO_Init_p5(){
    P5->SEL0 &= ~0x07; // configure P6.0 GPIO
    P5->SEL1 &= ~0x07;
    P5->DIR &= ~0x07; // make P5.0 inputs

}
Systick.h file
// SysTick.h
// Runs on MSP432
// Provide functions that initialize the SysTick module, wait at least a
// designated number of clock cycles, and wait approximately a multiple
// of 10 milliseconds using busy wait.  After a power-on-reset, the
// MSP432 gets its clock from the internal digitally controlled
// oscillator, which is set to 3 MHz by default.  One distinct advantage
// of the MSP432 is that it has low-power clock options to reduce power
// consumption by reducing clock frequency.  This matters for the
// function SysTick_Wait10ms(), which will wait longer than 10 ms if the
// clock is slower.
// Daniel Valvano
// May 10, 2015

/* This example accompanies the book
   "Embedded Systems: Introduction to MSP432 Microcontrollers",
   ISBN: 978-1469998749, Jonathan Valvano, copyright (c) 2015
   Volume 1, Program 4.7


 Copyright 2015 by Jonathan W. Valvano, valvano@mail.utexas.edu
    You may use, edit, run or distribute this file
    as long as the above copyright notice remains
 THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
 OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 For more information about my classes, my research, and my books, see
 http://users.ece.utexas.edu/~valvano/
 */

// Initialize SysTick with busy wait running at bus clock.
void SysTick_Init(void);

// Time delay using busy wait.
// The delay parameter is in units of the core clock. (units of 333 nsec for 3 MHz clock)
void SysTick_Wait(uint32_t delay);

// Time delay using busy wait.
// This assumes 3 MHz system clock.
void SysTick_Wait10ms(uint32_t delay);
SysTick.c file
#include <stdint.h>
#include "msp432p401r.h"

// Initialize SysTick with busy wait running at bus clock.
void SysTick_Init(void){
	SysTick->CTRL = 0;                    // disable SysTick during setup
	SysTick->LOAD = 0x00FFFFFF;           // maximum reload value
	SysTick->VAL = 0;                    // any write to current clears it
	SysTick->CTRL = 0x00000005;           // enable SysTick with no interrupts
}
// Time delay using busy wait.
// The delay parameter is in units of the core clock. (units of 333 nsec for 3 MHz clock)
void SysTick_Wait(uint32_t delay){
  // method #1: set Reload Value Register, clear Current Value Register, poll COUNTFLAG in Control and Status Register
  if(delay <= 1){
    // without this step:
    // if delay == 0, this function will wait 0x00FFFFFF cycles
    // if delay == 1, this function will never return (because COUNTFLAG is set on 1->0 transition)
    return;                   // do nothing; at least 1 cycle has already passed anyway
  }
  SysTick->LOAD = (delay - 1);// count down to zero
  SysTick->VAL = 0;          // any write to CVR clears it and COUNTFLAG in CSR
  while((SysTick->CTRL&0x00010000) == 0){};
  // method #2: repeatedly evaluate elapsed time
/*  volatile uint32_t elapsedTime;
  uint32_t startTime = SysTick->VAL;
  do{
    elapsedTime = (startTime-SysTick->VAL)&0x00FFFFFF;
  }
  while(elapsedTime <= delay);*/
}
// Time delay using busy wait.
// This assumes 3 MHz system clock.
void SysTick_Wait10ms(uint32_t delay){
  uint32_t i;
  for(i=0; i<delay; i++){
    SysTick_Wait(30000);  // wait 10ms (assumes 3 MHz clock)
  }
}

